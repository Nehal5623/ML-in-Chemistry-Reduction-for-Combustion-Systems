# -*- coding: utf-8 -*-
"""Constant_Volume_Reactor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yMq9S8sR9fqGkemBfNT-cw8Nbg3SwfHI
"""

pip install cantera numpy pandas

"""
Constant Volume Reactor Simulation using Cantera

This script simulates methane-air combustion in a constant volume reactor
using Cantera and the GRI-Mech 3.0 mechanism. It generates randomized
initial conditions (temperature, pressure, equivalence ratio, volume)
and records the final species mole fractions and thermodynamic outputs.

=
"""

import cantera as ct
import numpy as np
import pandas as pd
from tqdm import tqdm


# 1. Mechanism and Species Setup

gas = ct.Solution('gri30.yaml')
species_list = gas.species_names  # List of all species (typically ~53)


# 2. Simulation Settings


num_data_points = 3000  # Total number of simulations to run

# Define input parameter ranges
T0_range = (900, 1800)        # Initial temperature in Kelvin
P0_range = (1e5, 5e6)         # Initial pressure in Pascals
phi_range = (0.5, 2.0)        # Equivalence ratio (fuel-to-air ratio)
volume_range = (0.5, 2.0)     # Reactor volume in mÂ³

fuel = 'CH4'
oxidizer = {'O2': 1.0, 'N2': 3.76}  # Air-like composition


# 3. Data Collection Loop


data = []
print("Running Cantera constant-volume reactor simulations...")

for _ in tqdm(range(num_data_points)):
    # Randomly sample reactor input conditions
    T0 = np.random.uniform(*T0_range)
    P0 = np.random.uniform(*P0_range)
    phi = np.random.uniform(*phi_range)
    volume = np.random.uniform(*volume_range)

    # Set gas mixture at equivalence ratio phi
    gas.set_equivalence_ratio(phi, fuel, oxidizer)
    gas.TP = T0, P0  # Set initial temp and pressure

    # Initialize a constant-volume ideal gas reactor
    reactor = ct.IdealGasReactor(gas, volume=volume)
    sim = ct.ReactorNet([reactor])

    # Run simulation for a fixed time duration (1 ms)
    time = 0.0
    t_end = 1e-3  # seconds
    while time < t_end:
        time = sim.step()

    # Extract final thermodynamic data
    final_T = reactor.T
    final_h = gas.enthalpy_mass
    mole_fractions = gas.mole_fraction_dict()

    # Assemble row for DataFrame
    row = {
        'T0': T0,
        'P0': P0,
        'phi': phi,
        'volume': volume,
        'final_T': final_T,
        'final_h': final_h
    }

    # Add final mole fractions of all species
    for sp in species_list:
        row[sp] = mole_fractions.get(sp, 0.0)

    data.append(row)


# 4. Save Output Dataset


df = pd.DataFrame(data)
df.to_csv('Constant_Volume_Data.csv', index=False)
print("Simulation complete. Data saved to 'combustion_data.csv'")

from google.colab import files
files.download('Constant_Volume_Data.csv')

